package org.ebics.client.keymgmt

import org.ebics.client.api.EbicsSession
import org.ebics.client.api.trace.BankConnectionTraceSession
import org.ebics.client.certificate.BankCertificateManager
import org.ebics.client.exception.EbicsException

import java.io.IOException
import java.security.GeneralSecurityException

/**
 * Constructs a new `KeyManagement` instance
 * with a given ebics session
 * @param session the ebics session
 */
interface KeyManagement {
    /**
     * Sends the user's signature key (A005) to the bank.
     * After successful operation the user is in state "initialized".
     * @param orderId the order ID. Let it null to generate a random one.
     * @throws EbicsException server generated error message
     * @throws IOException communication error
     */
    @Throws(EbicsException::class, IOException::class)
    fun sendINI(ebicsSession: EbicsSession, traceSession: BankConnectionTraceSession)

    /**
     * Sends the public part of the protocol keys to the bank.
     * @param orderId the order ID. Let it null to generate a random one.
     * @throws IOException communication error
     * @throws EbicsException server generated error message
     */
    @Throws(IOException::class, EbicsException::class)
    fun sendHIA(ebicsSession: EbicsSession, traceSession: BankConnectionTraceSession)

    /**
     * Sends encryption and authentication keys to the bank.
     * This order is only allowed for a new user at the bank side that has been created by copying the A005 key.
     * The keys will be activated immediately after successful completion of the transfer.
     * @throws IOException communication error
     * @throws GeneralSecurityException data decryption error
     * @throws EbicsException server generated error message
     */
    @Throws(IOException::class, GeneralSecurityException::class, EbicsException::class)
    fun sendHPB(ebicsSession: EbicsSession, traceSession: BankConnectionTraceSession, password: String): BankCertificateManager

    /**
     * Sends the SPR order to the bank.
     * After that you have to start over with sending INI and HIA.
     * @throws IOException Communication exception
     * @throws EbicsException Error message generated by the bank.
     */
    @Throws(IOException::class, EbicsException::class)
    fun lockAccess(ebicsSession: EbicsSession, traceSession: BankConnectionTraceSession)
}